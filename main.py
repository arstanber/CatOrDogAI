import torch
import torchvision.transforms as transforms
from PIL import Image
import cv2
import pyttsx3

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ResNet18
model = torch.hub.load('pytorch/vision', 'resnet18', weights='ResNet18_Weights.DEFAULT')
model.eval()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ ImageNet
with open("imagenet_classes.txt") as f:
    categories = [line.strip() for line in f.readlines()]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]
    )
])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
engine = pyttsx3.init()
already_said = None  # –ß—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª —Ñ—Ä–∞–∑—É

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É
cap = cv2.VideoCapture(0)
print("–ù–∞–∂–º–∏—Ç–µ 'q' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏")

while True:
    ret, frame = cap.read()
    if not ret:
        continue

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–¥—Ä OpenCV –≤ PIL Image
    image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    input_tensor = preprocess(image)
    input_batch = input_tensor.unsqueeze(0)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    with torch.no_grad():
        output = model(input_batch)
        probabilities = torch.nn.functional.softmax(output[0], dim=0)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-1 –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    top1_prob, top1_catid = torch.topk(probabilities, 1)
    class_name = categories[top1_catid]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –∫–æ—à–∫–∞ –∏–ª–∏ —Å–æ–±–∞–∫–∞
    if "cat" in class_name.lower():
        if already_said != "cat":
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—à–∫–∞ üê±")
            engine.say("–≠—Ç–æ –∫–æ—à–∫–∞")
            engine.runAndWait()
            already_said = "cat"
    elif "dog" in class_name.lower():
        if already_said != "dog":
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ–±–∞–∫–∞ üê∂")
            engine.say("–≠—Ç–æ —Å–æ–±–∞–∫–∞")
            engine.runAndWait()
            already_said = "dog"
    else:
        already_said = None  # –°–±—Ä–æ—Å, –µ—Å–ª–∏ –Ω–∏ –∫–æ—à–∫–∞, –Ω–∏ —Å–æ–±–∞–∫–∞

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
    cv2.imshow("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏/—Å–æ–±–∞–∫–∏", frame)

    # –í—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
cap.release()
cv2.destroyAllWindows()
